defmodule AdventOfCode.Day2 do

  @input """
URULLLLLRLDDUURRRULLLDURRDRDRDLURURURLDLLLLRUDDRRLUDDDDDDLRLRDDDUUDUDLDULUDLDURDULLRDDURLLLRRRLLRURLLUDRDLLRRLDDRUDULRRDDLUUUDRLDLURRRULURRDLLLDDDLUDURDDRLDDDLLRULDRUDDDLUDLURUDLLRURRUURUDLLLUUUUDDURDRDDDLDRRUDURDLLLULUDURURDUUULRULUDRUUUUDLRLUUUUUDDRRDDDURULLLRRLDURLDLDRDLLLUULLRRLLLLDRLRDRRDRRUDDLULUUDDDDRRUUDDLURLRDUUDRRLDUDLRRRLRRUUDURDRULULRDURDRRRDLDUUULRDDLRLRDLUUDDUDDRLRRULLLULULLDDDRRDUUUDDRURDDURDRLRDLDRDRULRLUURUDRLULRLURLRRULDRLRDUDLDURLLRLUDLUDDURDUURLUDRLUL
LLLUUURUULDDDULRRDLRLLLLLLLLRURRDLURLUDRRDDULDRRRRRRLDURRULDDULLDDDRUUDLUDULLDLRRLUULULRULURDURLLDULURDUDLRRLRLLDULLRLDURRUULDLDULLRDULULLLULDRLDLDLDLDDLULRLDUDRULUDDRDDRLRLURURRDULLUULLDRRDRRDLDLLRDLDDUUURLUULDDRRRUULDULDDRDDLULUDRURUULLUDRURDRULDRUULLRRDURUDDLDUULLDDRLRRDUDRLRRRLDRLRULDRDRRUDRLLLDDUDLULLURRURRLUURDRLLDLLDUDLUUURRLRDDUDRLUDLLRULLDUUURDLUUUDUDULRLDLDRUUDULRDRRUDLULRLRDLDRRDDDUDLDLDLRUURLDLLUURDLDLRDLDRUDDUURLLLRDRDRRULLRLRDULUDDDLUDURLDUDLLRULRDURDRDLLULRRDLLLDUURRDUDDLDDRULRRRRLRDDRURLLRRLLL
DRURLDDDDRLUDRDURUDDULLRRLLRLDDRLULURLDURRLDRRLRLUURDDRRDLRDLDLULDURUDRLRUDULRURURLRUDRLLDDUDDRDLDRLLDDLRRDRUUULDUUDRUULRLLDLLULLLRRDRURDLDDRRDDUDDULLDUUULDRUDLDLURLDRURUDLRDDDURRLRDDUDLLLRRUDRULRULRRLLUUULDRLRRRLLLDLLDUDDUUDRURLDLRRUUURLUDDDRRDDLDDDDLUURDDULDRLRURLULLURRDRLLURLLLURDURLDLUDUUDUULLRLDLLLLULRDDLDUDUDDDUULURRLULDLDRLRDRLULLUDDUUUUURDRURLDUULDRRDULUDUDLDDRDLUDDURUDURLDULRUDRRDLRLRDRRURLDLURLULULDDUUDLRLLLLURRURULDDRUUULLDULDRDULDDDLLLRLULDDUDLRUDUDUDURLURLDDLRULDLURD
DRUDRDURUURDLRLUUUUURUDLRDUURLLDUULDUULDLURDDUULDRDDRDULUDDDRRRRLDDUURLRDLLRLRURDRRRDURDULRLDRDURUDLLDDULRDUDULRRLLUDLLUUURDULRDDLURULRURDDLRLLULUDURDRRUDLULLRLDUDLURUDRUULDUDLRDUDRRDULDDLDRLRRULURULUURDULRRLDLDULULRUUUUULUURLURLRDLLRRRRLURRUDLRLDDDLDRDRURLULRDUDLRLURRDRRLRLLDLDDLLRRULRLRLRUDRUUULLDUULLDDRLUDDRURLRLDLULDURLLRRLDLLRDDDUDDUULLUDRUDURLLRDRUDLUDLLUDRUUDLRUURRRLLUULLUUURLLLRURUULLDLLDURUUUULDDDLRLURDRLRRRRRRUDLLLRUUULDRRDLRDLLDRDLDDLDLRDUDLDDRDDDDRULRRLRDULLDULULULRULLRRLLUURUUUDLDLUDUDDDLUUDDDDUDDDUURUUDRDURRLUULRRDUUDDUDRRRDLRDRLDLRRURUUDRRRUUDLDRLRDURD
DDDLRURUDRRRURUUDLRLRDULDRDUULRURRRUULUDULDDLRRLLRLDDLURLRUDRLRRLRDLRLLDDLULDLRRURDDRDLLDDRUDRRRURRDUDULUDDULRRDRLDUULDLLLDRLUDRDURDRRDLLLLRRLRLLULRURUUDDRULDLLRULDRDLUDLULDDDLLUULRRLDDUURDLULUULULRDDDLDUDDLLLRRLLLDULRDDLRRUDDRDDLLLLDLDLULRRRDUDURRLUUDLLLLDUUULDULRDRULLRDRUDULRUUDULULDRDLDUDRRLRRDRLDUDLULLUDDLURLUUUDRDUDRULULDRDLRDRRLDDRRLUURDRULDLRRLLRRLDLRRLDLDRULDDRLURDULRRUDURRUURDUUURULUUUDLRRLDRDLULDURUDUDLUDDDULULRULDRRRLRURLRLRLUDDLUUDRRRLUUUDURLDRLRRDRRDURLLL
"""

  def solve(pattern) do
    @input
    |> parse
    |> move(pattern)
    |> format
  end

  defp parse(string) do
    string
    |> String.split("\n", trim: true)
    |> Enum.map(fn(dirs) ->
      dirs
      |> String.to_charlist
      |> Enum.map(&to_dir/1)
    end)
  end

  defp move(instructions, pattern) do
    instructions
    |> Enum.map(fn(instruction) ->
      instruction
      |> Enum.reduce(5, fn(dir, number) ->
        pattern(pattern, {dir, number})
      end)
    end)
  end

  defp format(numbers) do
    numbers
    |> Enum.map(&to_char/1)
    |> Enum.join("")
  end

  defp pattern(:default, {dir, number}) do
    case {dir, number} do
      {:up, x} when x in [1, 2, 3] -> x
      {:right, x} when x in [3, 6, 9] -> x
      {:down, x} when x in [7, 8, 9] -> x
      {:left, x} when x in [1, 4, 7] -> x

      {:up, x} when x in [4, 5, 6, 7, 8, 9] -> x-3
      {:right, x} when x in [1, 2, 4, 5, 7, 8] -> x+1
      {:down, x} when x in [1, 2, 3, 4, 5, 6] -> x+3
      {:left, x} when x in [2, 3, 5, 6, 8, 9] -> x-1
    end
  end

  defp pattern(:complex, {dir, number}) do
    case {dir, number} do
      {:up, x} when x in [5, 2, 1, 4, 9] -> x
      {:right, x} when x in [1, 4, 9, 12, 13] -> x
      {:down, x} when x in [5, 10, 13, 12, 9] -> x
      {:left, x} when x in [1, 2, 5, 10, 13] -> x

      {:up, 3} -> 1
      {:up, 6} -> 2
      {:up, 7} -> 3
      {:up, 8} -> 4
      {:up, 10} -> 6
      {:up, 11} -> 7
      {:up, 12} -> 8
      {:up, 13} -> 11

      {:right, 2} -> 3
      {:right, 3} -> 4
      {:right, 5} -> 6
      {:right, 6} -> 7
      {:right, 7} -> 8
      {:right, 8} -> 9
      {:right, 10} -> 11
      {:right, 11} -> 12

      {:down, 1} -> 3
      {:down, 2} -> 6
      {:down, 3} -> 7
      {:down, 4} -> 8
      {:down, 6} -> 10
      {:down, 7} -> 11
      {:down, 8} -> 12
      {:down, 11} -> 13

      {:left, 3} -> 2
      {:left, 4} -> 3
      {:left, 6} -> 5
      {:left, 7} -> 6
      {:left, 8} -> 7
      {:left, 9} -> 8
      {:left, 11} -> 10
      {:left, 12} -> 11
    end
  end

  defp to_char(10), do: "A"
  defp to_char(11), do: "B"
  defp to_char(12), do: "C"
  defp to_char(13), do: "D"
  defp to_char(i), do: i

  defp to_dir(?U), do: :up
  defp to_dir(?R), do: :right
  defp to_dir(?L), do: :left
  defp to_dir(?D), do: :down

end